We prove, by induction, that the code in 'file.cpp' works.
Prior to that, we define a record to be "legitimate" if its key is 'key' and the position it occupies in the file is 'hash(key)'.
A record is, otherwise, "illegitimate".
We also define a record to be invalid if it was read in an empty position - its 'good' member is always set to 'false'.
In the context of pointers relative to the contents of the file, -1 is refered by as null.

Basis:
  The basis of the induction is when the first insertion is made.
First, one must look if the empty file list was properly initialized.
Line 59 initializes the next empty position as the last position in the file.
After the writing of the header, the 'file_size' empty records are written to the file, sequentially.
By the code presented in function create, the empty file has all positions empty, linked in reversed order.
We now analyze the function 'search' for the empty file, its basis case.
Line 187 reads the record hashing to 'hash(key)'.
As the file is empty, the read record is invalid and the 'while' in line 190 is skipped.
The program satisfies the conditions for the 'if' in line 195, as the record is invalid, and 'search' correctly returns null.
  We now turn to the 'remove' method and analyze its correctness for the empty file.
The 'search' call, as seen above, always returns null when the file is empty.
As this is the case in line 305, the 'if' in line 308 is satisfied and the program outputs that this key was not found.
Hence, the 'remove' method is also correct for the empty file.
  'lookup' reads the record in 'hash(key)'.
As all records are empty, and so is this.
The read record is invalid and satisfy the 'if' in line 279: the program correctly outputs that no such record was found.
 The final method proven for the basis case is 'insert'. 
