  A prova da correcao do metodo de insercao pode ser dividido em 2 casos: ou a posicao a ser ocupada pela chave a ser inserida esta vaga ou nao esta.

  - Caso 1: a posicao da chave esta vaga
  O registro lido tem valor de 'Record::good' igual a 'false' e o programa entra no if da linha 233. O espaco vazio é removido da lista de posicões vagas e, caso essa fosse a vaga preferencial, 'next_free' é atualizada, mantendo a gerência de posições livres correta. Os apontadores do registro a ser inserido são apontados para nulo (pois esse é garantidamente o único registro dessa classe no atualmente arquivo) e o registro a ser inserido é escrito no arquivo, mantendo a organização do arquivo correta. Esse caso também vale como passo base da indução do método 'insert'.

  - Caso 2: a posicao da chave está ocupada
  Temos dois novos casos: ou o registro ocupando a posicão (chamemos esse registro de "registro ocupante") pertence a mesma classe do registro a ser inserido (chamemos esse registro de "registro inserido") ou ele pertence a uma outra classe. Caso o registro ocupante seja de outra classe, o registro ocupante é relocado para a próxima posicão livre. Por indução, a cadeia dos registros de uma classe começa na posição da classe. Como o elemento que ocupa a posição da classe do registro inserido pertence a outra classe, o registro inserido é o primeiro de sua classe a aparecer no arquivo e seus ponteiros podem apontar para nulo.
  Caso contrário, isto é, o registro ocupante é da classe do registro inserido, então é necessário garantir que o registro inserido não já está no arquivo. A chamada de 'search' busca pelo registro inserido no arquivo. Caso ele já exista, 'search' retorna o ponteiro para sua posicão e o programa vai para o 'else' da linha 265, imprimindo "chave ja existente". Caso a busca seja malsucedida, precisamos inserir o registro inserido. O registro atual tem seu apontador de próximo ajustado para a próxima posição vaga, posição esta para a qual movemos o registro ocupante. Isso, acrescido do apontamento do ponteiro anterior de registro inserido para nulo, garante a manutenção da lista da classe da forma apropriada.  
